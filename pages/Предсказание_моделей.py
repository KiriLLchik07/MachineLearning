import streamlit as st
import pandas as pd
import pickle
from catboost import CatBoostRegressor

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
    page_icon="üîç"
)

st.title("–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–µ–π ML")
st.markdown("---")

@st.cache_resource  
def load_models():
    models = {
        "–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π": pickle.load(open("models/decision_tree.pkl", "rb")),
        "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥": pickle.load(open("models/gradient_boost.pkl", "rb")),
        "CatBoost": CatBoostRegressor().load_model("models/catboost.cbm"),
        "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å": pickle.load(open("models/random_forest.pkl", "rb")),
        "–°—Ç–µ–∫–∏–Ω–≥": pickle.load(open("models/stacking.pkl", "rb")),
    }
    return models

models = load_models()

st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞")
uploaded_file = st.file_uploader("kc_house_data.csv", type=["csv"])

if uploaded_file:
    data = pd.read_csv(uploaded_file)
    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(data.head())

    if "price" in data.columns:
        st.warning("–£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ 'price' (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)")
        new_data = data.drop("price", axis=1)

    model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", list(models.keys()))
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"):
        model = models[model_name]
        predictions = model.predict(new_data)
        
        predictions_df = pd.DataFrame({'–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê $)': data['price'], '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê $)': predictions})
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.write("""
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –¢–∞–±–ª–∏—Ü—ã, –≥–¥–µ –≤ –ª–µ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–º–∞, 
        –∞ –≤ –ø—Ä–∞–≤–æ–º - –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
        """)
        st.dataframe(predictions_df)
        
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (CSV)",
            data=data.to_csv(index=False).encode("utf-8"),
            file_name="predictions.csv",
            mime="text/csv",
        )

def manual_input():
    st.header("2. –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    with st.expander("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", expanded=True):
        col1, col2, col3 = st.columns(3)
        with col1:
            bedrooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞–ª–µ–Ω", min_value=1, max_value=10, value=3)
            bathrooms = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–Ω–Ω—ã—Ö", min_value=1.0, max_value=5.0, value=2.0, step=0.5)
        with col2:
            sqft_living = st.number_input("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤. —Ñ—É—Ç—ã)", min_value=500, max_value=10000, value=1500)
            sqft_lot = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–∫–≤. —Ñ—É—Ç—ã)", min_value=500, max_value=50000, value=5000)
        with col3:
            floors = st.number_input("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å", min_value=1, max_value=3, value=1)
            waterfront = st.selectbox("–í–∏–¥ –Ω–∞ –≤–æ–¥—É", [0, 1], format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç")

    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        col1, col2 = st.columns(2)
        with col1:
            view = st.slider("–û—Ü–µ–Ω–∫–∞ –≤–∏–¥–∞ (0-4)", 0, 4, 0)
            condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–∞ (1-5)", 1, 5, 3)
            grade = st.slider("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å (1-13)", 1, 13, 7)
        with col2:
            yr_built = st.number_input("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", min_value=1900, max_value=2023, value=1990)
            yr_renovated = st.number_input("–ì–æ–¥ —Ä–µ–º–æ–Ω—Ç–∞ (0 –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)", min_value=0, max_value=2023, value=0)
    
    with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=False):
        sqft_above = st.number_input("–ü–ª–æ—â–∞–¥—å –Ω–∞–¥ –∑–µ–º–ª–µ–π (–∫–≤. —Ñ—É—Ç—ã)", min_value=500, value=1500)
        sqft_basement = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–¥–≤–∞–ª–∞ (–∫–≤. —Ñ—É—Ç—ã)", min_value=0, value=0)
        zipcode = st.number_input("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", min_value=98001, max_value=98199, value=98178)
        lat = st.number_input("–®–∏—Ä–æ—Ç–∞", min_value=47.0, max_value=48.0, value=47.5)
        long = st.number_input("–î–æ–ª–≥–æ—Ç–∞", min_value=-123.0, max_value=-121.0, value=-122.0)
        sqft_living15 = st.number_input("–°—Ä–µ–¥–Ω—è—è –∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å —Å–æ—Å–µ–¥–µ–π (–∫–≤. —Ñ—É—Ç—ã)", min_value=500, value=1500)
        sqft_lot15 = st.number_input("–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ —Å–æ—Å–µ–¥–µ–π (–∫–≤. —Ñ—É—Ç—ã)", min_value=500, value=5000)

    input_data = {
        'bedrooms': bedrooms,
        'bathrooms': bathrooms,
        'sqft_living': sqft_living,
        'sqft_lot': sqft_lot,
        'floors': floors,
        'waterfront': waterfront,
        'view': view,
        'condition': condition,
        'grade': grade,
        'sqft_above': sqft_above,
        'sqft_basement': sqft_basement,
        'yr_built': yr_built,
        'yr_renovated': yr_renovated,
        'zipcode': zipcode,
        'lat': lat,
        'long': long,
        'sqft_living15': sqft_living15,
        'sqft_lot15': sqft_lot15
    }

    return pd.DataFrame([input_data])

manual_data = manual_input()

if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)"):
    model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", list(models.keys()), key="manual_model")
    model = models[model_name]
    
    try:
        prediction = model.predict(manual_data)[0]
        st.success(f"### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞: **${prediction:,.2f}**")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${prediction:,.0f}")
        with col2:
            st.write("""
            **–ü–æ—è—Å–Ω–µ–Ω–∏–µ:**  
            –ú–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
            """)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")